{"version":3,"sources":["components/HeaderForm/HeaderForm.jsx","components/Header/Header.jsx","components/Main/Main.jsx","components/Footer/Footer.jsx","App.js","hooks/hooks.js","index.js"],"names":["HeaderForm","submitForm","enterNewTitle","addNewTitle","inputTitle","onSubmit","type","className","placeholder","value","onChange","onKeyDown","Header","newId","todosLength","useState","newTodo","setNewTodo","setInputTitle","appliedTitle","setAppliedTitle","applyQuerry","useCallback","f","delay","timeId","clearTimeout","args","setTimeout","debounce","event","preventDefault","length","target","key","id","title","completed","Main","React","memo","todos","changeCheckBox","onDelete","onUpdateTitle","setAllTodosCompleted","todoIdForEdit","setTodoIdForEdit","renameTitle","setRename","isChecked","setChecked","onClick","htmlFor","map","todo","classnames","editing","onDoubleClick","checked","Footer","gettodosActiveTodosLength","filterTodos","clearAllCompleted","useReducer","_","actions","isActive","dispatch","href","selected","App","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setTodos","visbleTodos","setVsibleTodos","newTodos","todoId","newCheck","find","filter","newTitle","revise","todoComplete","undefined","post","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bcfe2c3d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const HeaderForm = (\n  {\n    submitForm,\n    enterNewTitle,\n    addNewTitle,\n    inputTitle,\n  },\n) => (\n  <form\n    onSubmit={submitForm}\n  >\n    <input\n      type=\"text\"\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      value={inputTitle}\n      onChange={enterNewTitle}\n\n      onKeyDown={addNewTitle}\n    />\n  </form>\n);\n\nHeaderForm.propTypes = PropTypes.shape({\n  submitForm: PropTypes.func.isRequired,\n  enterNewTitle: PropTypes.func.isRequired,\n  addNewTitle: PropTypes.func.isRequired,\n  inputTitle: PropTypes.string.isRequired,\n}).isRequired;\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { HeaderForm } from '../HeaderForm';\n\nexport const Header = ({ onSubmit, newId, todosLength }) => {\n  const [newTodo, setNewTodo] = useState({});\n  const [inputTitle, setInputTitle] = useState('');\n  const [appliedTitle, setAppliedTitle] = useState('');\n\n  const debounce = (f, delay) => {\n    let timeId;\n\n    return (...args) => {\n      clearTimeout(timeId);\n      timeId = setTimeout(f, delay, ...args);\n    };\n  };\n\n  const applyQuerry = useCallback(debounce(setAppliedTitle, 100), []);\n\n  const submitForm = (event) => {\n    event.preventDefault();\n\n    if (inputTitle.length > 0) {\n      onSubmit(newTodo);\n      setInputTitle('');\n    }\n  };\n\n  const enterNewTitle = (event) => {\n    setInputTitle(event.target.value);\n    applyQuerry(event.target.value);\n  };\n\n  const addNewTitle = (event) => {\n    if (event.key === 'Enter') {\n      setNewTodo({\n        id: newId,\n        title: appliedTitle,\n        completed: false,\n      });\n    }\n  };\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <HeaderForm\n        submitForm={submitForm}\n        enterNewTitle={enterNewTitle}\n        addNewTitle={addNewTitle}\n        inputTitle={inputTitle}\n      />\n\n    </header>\n  );\n};\n\nHeader.propTypes = PropTypes.shape({\n  onSubmit: PropTypes.func.isRequired,\n  newId: PropTypes.number.isRequired,\n}).isRequired;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport const Main = React.memo(\n  ({\n    todos,\n    changeCheckBox,\n    onDelete,\n    onUpdateTitle,\n    setAllTodosCompleted,\n  }) => {\n    const [isCompleted, setCompleted] = useState(false);\n    const [todoIdForEdit, setTodoIdForEdit] = useState(0);\n    const [renameTitle, setRename] = useState('');\n    const [isChecked, setChecked] = useState(true);\n\n    return (\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onClick={() => {\n            setChecked(!isChecked);\n            setAllTodosCompleted(isChecked);\n          }}\n        />\n        {todos.length > 0 && (\n          <label\n            htmlFor=\"toggle-all\"\n          >\n            Mark all as complete\n          </label>\n        )}\n\n        <ul className=\"todo-list\">\n\n          {todos.map(todo => (\n\n            <li\n              className={classnames('',\n                { completed: todo.completed },\n                { editing: todoIdForEdit === todo.id })}\n              key={todo.id}\n              onDoubleClick={() => {\n                setTodoIdForEdit(todo.id);\n                setRename(todo.title);\n              }}\n            >\n              <div className=\"view\">\n                <input\n                  type=\"checkbox\"\n                  className=\"toggle\"\n                  checked={todo.completed}\n                  onClick={() => {\n                    changeCheckBox(todo.id, !todo.completed);\n                  }}\n                />\n                <label>{todo.title}</label>\n                <button\n                  type=\"button\"\n                  className=\"destroy\"\n                  onClick={() => {\n                    onDelete(todo.id);\n                  }}\n                />\n              </div>\n\n              <input\n                type=\"text\"\n                className=\"edit\"\n                value={renameTitle}\n                onChange={(event) => {\n                  setRename(event.target.value);\n                }}\n                onKeyDown={(event) => {\n                  if (event.key === 'Enter') {\n                    onUpdateTitle(todoIdForEdit, event.target.value);\n                    setTodoIdForEdit(null);\n                  }\n\n                  if (event.key === 'Escape') {\n                    setTodoIdForEdit(null);\n                  }\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n      </section>\n    );\n  },\n);\n\nMain.propTypes = PropTypes.shape({\n  data: PropTypes.arrayOf({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }),\n  changeCheckob: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onUpdateTitle: PropTypes.func.isRequired,\n}).isRequired;\n","import React, { useReducer } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Footer = React.memo(\n  ({ gettodosActiveTodosLength, filterTodos, clearAllCompleted }) => {\n    const reducer = (_, actions) => {\n      switch (actions) {\n        case 'all':\n          return 'all';\n\n        case 'active':\n          return 'active';\n\n        case 'completed':\n          return 'completed';\n\n        default:\n          return '';\n      }\n    };\n\n    const [isActive, dispatch] = useReducer(reducer, '');\n\n    const selectAll = () => {\n      dispatch('all');\n      filterTodos();\n    };\n\n    const selectActive = () => {\n      dispatch('active');\n      filterTodos(false);\n    };\n\n    const selectComplited = () => {\n      dispatch('completed');\n      filterTodos(true);\n    };\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${gettodosActiveTodosLength()} items left`}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              onClick={selectAll}\n              className={classnames({ selected: isActive === 'all' })}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              onClick={selectActive}\n              className={classnames({ selected: isActive === 'active' })}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              onClick={selectComplited}\n              className={classnames({ selected: isActive === 'completed' })}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => {\n            clearAllCompleted();\n          }}\n        >\n          Clear completed\n        </button>\n      </footer>\n    );\n  },\n);\n\nFooter.propTypes = PropTypes.shape({\n  filterData: PropTypes.func.isRequired,\n  gettodosActiveTodosLength: PropTypes.func.isRequired,\n  clearAllCompleted: PropTypes.func.isRequired,\n}).isRequired;\n","/* eslint-disable no-return-assign */\nimport React, { useEffect, useState } from 'react';\nimport { Header } from './components/Header';\nimport { Main } from './components/Main';\nimport { Footer } from './components/Footer';\nimport { useLocalStorage } from './hooks/hooks';\n\nexport function App() {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [visbleTodos, setVsibleTodos] = useState([]);\n\n  useEffect(() => {\n    setVsibleTodos(todos);\n  }, [todos]);\n\n  const updateTodos = (newTodos) => {\n    setTodos([...todos, newTodos]);\n  };\n\n  const updateTitle = (todoId, newTitle) => {\n    const findPost = visbleTodos.find(todo => todo.id === todoId);\n\n    findPost.title = newTitle;\n  };\n\n  const deleteTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const changeCheckox = (todoId, newCheck) => {\n    const updatedPost = todos.find(todo => todo.id === todoId);\n\n    updatedPost.completed = newCheck;\n\n    setTodos(todos.map(todo => todo));\n  };\n\n  const filterTodos = (todoComplete) => {\n    if (todoComplete === undefined) {\n      setVsibleTodos(todos);\n    } else {\n      setVsibleTodos(todos\n        .filter(post => post.completed === todoComplete));\n    }\n  };\n\n  const onlyActiveTodos = () => todos\n    .filter(todo => todo.completed === false).length;\n\n  const clearAllCompleted = () => {\n    setTodos(todos.filter(todo => todo.completed !== true));\n  };\n\n  const setAllTodosCompleted = (revise) => {\n    if (revise) {\n      setTodos(todos.map(todo => ({ ...todo, completed: true })));\n    } else {\n      setTodos(todos.map(todo => ({ ...todo, completed: false })));\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <Header\n        onSubmit={updateTodos}\n        todosLength={visbleTodos.length}\n        newId={todos.length + 1}\n      />\n\n      <Main\n        todos={visbleTodos}\n        changeCheckBox={changeCheckox}\n        onDelete={deleteTodo}\n        onUpdateTitle={updateTitle}\n        setAllTodosCompleted={setAllTodosCompleted}\n      />\n\n      {todos.length > 0 && (\n        <Footer\n          filterTodos={filterTodos}\n          gettodosActiveTodosLength={onlyActiveTodos}\n          clearAllCompleted={clearAllCompleted}\n        />\n      )}\n    </section>\n  );\n}\n","import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = (key, defaultValue) => {\n  const [state, setState] = useState(\n    () => JSON.parse(window.localStorage.getItem(key)) ?? defaultValue,\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state, key]);\n\n  return [state, setState];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}