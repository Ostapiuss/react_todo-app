{"version":3,"sources":["components/HeaderForm/HeaderForm.jsx","components/Header/Header.jsx","components/Main/Main.jsx","components/Footer/Footer.jsx","App.js","hooks/hooks.js","index.js"],"names":["HeaderForm","submitForm","enterNewTitle","addNewTitle","inputTitle","onSubmit","type","className","placeholder","value","onChange","onKeyDown","Header","newId","useState","newTodo","setNewTodo","setInputTitle","appliedTitle","setAppliedTitle","applyQuerry","useCallback","f","delay","timeId","clearTimeout","args","setTimeout","debounce","useEffect","id","title","completed","event","preventDefault","target","key","Main","React","memo","todos","changeCheckBox","onDelete","onUpdateTitle","setAllTodosCompleted","isCompleted","setCompleted","isEdit","setEdit","renameTitle","setRename","onClick","length","htmlFor","map","todo","classnames","editing","onDoubleClick","checked","Footer","todosLength","filterTodos","clearAllCompleted","useReducer","_","actions","isActive","dispatch","href","selected","App","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","setItem","stringify","useLocalStorage","setTodos","visbleTodos","setVsibleTodos","newTodos","todoId","newCheck","updatedPost","find","filter","newTitle","todoComplete","undefined","post","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfd44e23.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const HeaderForm = (\n  {\n    submitForm,\n    enterNewTitle,\n    addNewTitle,\n    inputTitle,\n  },\n) => (\n  <form\n    onSubmit={submitForm}\n  >\n    <input\n      type=\"text\"\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      value={inputTitle}\n      onChange={enterNewTitle}\n\n      onKeyDown={addNewTitle}\n    />\n  </form>\n);\n\nHeaderForm.propTypes = PropTypes.shape({\n  submitForm: PropTypes.func.isRequired,\n  enterNewTitle: PropTypes.func.isRequired,\n  addNewTitle: PropTypes.func.isRequired,\n  inputTitle: PropTypes.string.isRequired,\n}).isRequired;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { HeaderForm } from '../HeaderForm';\n\nexport const Header = ({ onSubmit, newId }) => {\n  const [newTodo, setNewTodo] = useState({});\n  const [inputTitle, setInputTitle] = useState('');\n  const [appliedTitle, setAppliedTitle] = useState('');\n\n  const debounce = (f, delay) => {\n    let timeId;\n\n    return (...args) => {\n      clearTimeout(timeId);\n      timeId = setTimeout(f, delay, ...args);\n    };\n  };\n\n  const applyQuerry = useCallback(debounce(setAppliedTitle, 100), []);\n\n  useEffect(() => {\n    setNewTodo({\n      id: newId,\n      title: inputTitle,\n      completed: false,\n    });\n  }, [appliedTitle]);\n\n  const submitForm = (event) => {\n    event.preventDefault();\n\n    onSubmit(newTodo);\n  };\n\n  const enterNewTitle = (event) => {\n    setInputTitle(event.target.value);\n    applyQuerry(event.target.value);\n  };\n\n  const addNewTitle = (event) => {\n    if (event.key === 'Enter') {\n      setInputTitle('');\n    }\n  };\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <HeaderForm\n        submitForm={submitForm}\n        enterNewTitle={enterNewTitle}\n        addNewTitle={addNewTitle}\n        inputTitle={inputTitle}\n      />\n\n    </header>\n  );\n};\n\nHeader.propTypes = PropTypes.shape({\n  onSubmit: PropTypes.func.isRequired,\n  newId: PropTypes.number.isRequired,\n}).isRequired;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport const Main = React.memo(\n  ({\n    todos,\n    changeCheckBox,\n    onDelete,\n    onUpdateTitle,\n    setAllTodosCompleted,\n  }) => {\n    const [isCompleted, setCompleted] = useState(false);\n    const [isEdit, setEdit] = useState(0);\n    const [renameTitle, setRename] = useState('');\n\n    return (\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onClick={setAllTodosCompleted}\n        />\n        {todos.length > 0 && (\n          <label\n            htmlFor=\"toggle-all\"\n          >\n            Mark all as complete\n          </label>\n        )}\n\n        <ul className=\"todo-list\">\n\n          {todos.map(todo => (\n\n            <li\n              className={classnames('',\n                { completed: todo.completed },\n                { editing: isEdit === todo.id })}\n              key={todo.id}\n              onDoubleClick={() => {\n                setEdit(todo.id);\n                setRename(todo.title);\n              }}\n            >\n              <div className=\"view\">\n                <input\n                  type=\"checkbox\"\n                  className=\"toggle\"\n                  checked={todo.completed}\n                  onClick={() => {\n                    setCompleted(!isCompleted);\n                    changeCheckBox(todo.id, isCompleted);\n                  }}\n                />\n                <label>{todo.title}</label>\n                <button\n                  type=\"button\"\n                  className=\"destroy\"\n                  onClick={() => {\n                    onDelete(todo.id);\n                  }}\n                />\n              </div>\n\n              <input\n                type=\"text\"\n                className=\"edit\"\n                value={renameTitle}\n                onChange={(event) => {\n                  setRename(event.target.value);\n                }}\n                onKeyDown={(event) => {\n                  if (event.key === 'Enter') {\n                    onUpdateTitle(isEdit, event.target.value);\n                    setEdit(null);\n                  }\n\n                  if (event.key === 'Escape') {\n                    setEdit(null);\n                  }\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n      </section>\n    );\n  },\n);\n\nMain.propTypes = PropTypes.shape({\n  data: PropTypes.arrayOf({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }),\n  changeCheckob: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onUpdateTitle: PropTypes.func.isRequired,\n}).isRequired;\n","import React, { useReducer } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Footer = React.memo(\n  ({ todosLength, filterTodos, clearAllCompleted }) => {\n    const reducer = (_, actions) => {\n      switch (actions) {\n        case 'all':\n          return 'all';\n\n        case 'active':\n          return 'active';\n\n        case 'completed':\n          return 'completed';\n\n        default:\n          return '';\n      }\n    };\n\n    const [isActive, dispatch] = useReducer(reducer, '');\n\n    const selectAll = () => {\n      dispatch('all');\n      filterTodos();\n    };\n\n    const selectActive = () => {\n      dispatch('active');\n      filterTodos(false);\n    };\n\n    const selectComplited = () => {\n      dispatch('completed');\n      filterTodos(true);\n    };\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${todosLength} items left`}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              onClick={selectAll}\n              className={classnames({ selected: isActive === 'all' })}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              onClick={selectActive}\n              className={classnames({ selected: isActive === 'active' })}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              onClick={selectComplited}\n              className={classnames({ selected: isActive === 'completed' })}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => {\n            clearAllCompleted();\n          }}\n        >\n          Clear completed\n        </button>\n      </footer>\n    );\n  },\n);\n\nFooter.propTypes = PropTypes.shape({\n  filterData: PropTypes.func.isRequired,\n  itemsLength: PropTypes.number.isRequired,\n  clearAllCompleted: PropTypes.func.isRequired,\n}).isRequired;\n","/* eslint-disable no-return-assign */\nimport React, { useEffect, useState } from 'react';\nimport { Header } from './components/Header';\nimport { Main } from './components/Main';\nimport { Footer } from './components/Footer';\nimport { useLocalStorage } from './hooks/hooks';\n\nexport function App() {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [visbleTodos, setVsibleTodos] = useState([]);\n\n  useEffect(() => {\n    setVsibleTodos(todos);\n  }, [todos]);\n\n  const updateTodos = (newTodos) => {\n    setTodos([...todos, newTodos]);\n  };\n\n  const updateTitle = (todoId, newTitle) => {\n    const findPost = visbleTodos.find(todo => todo.id === todoId);\n\n    findPost.title = newTitle;\n  };\n\n  const deleteTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const changeCheckox = (todoId, newCheck) => {\n    const updatedPost = todos.find(todo => todo.id === todoId);\n\n    updatedPost.completed = newCheck;\n\n    setTodos(todos.map(todo => ({ ...todo, updatedPost })));\n  };\n\n  const filterTodos = (todoComplete) => {\n    if (todoComplete === undefined) {\n      setVsibleTodos(todos);\n    } else {\n      setVsibleTodos(todos\n        .filter(post => post.completed === todoComplete));\n    }\n  };\n\n  const clearAllCompleted = () => {\n    setTodos(todos.filter(todo => todo.completed !== true));\n  };\n\n  const setAllTodosCompleted = () => {\n    setTodos(todos.map(todo => ({ ...todo, completed: !todo.completed })));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <Header\n        onSubmit={updateTodos}\n        newId={todos.length + 1}\n      />\n\n      <Main\n        todos={visbleTodos}\n        changeCheckBox={changeCheckox}\n        onDelete={deleteTodo}\n        onUpdateTitle={updateTitle}\n        setAllTodosCompleted={setAllTodosCompleted}\n      />\n\n      {visbleTodos.length > 0 && (\n        <Footer\n          filterTodos={filterTodos}\n          todosLength={todos.length}\n          clearAllCompleted={clearAllCompleted}\n        />\n      )}\n    </section>\n  );\n}\n","import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = (key, defaultValue) => {\n  const [state, setState] = useState(\n    () => JSON.parse(window.localStorage.getItem(key)) ?? defaultValue,\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state, key]);\n\n  return [state, setState];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}