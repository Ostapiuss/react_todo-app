{"version":3,"sources":["components/Header/Header.jsx","components/Main/Main.jsx","components/Footer/Footer.jsx","App.js","hooks/hooks.js","index.js"],"names":["Header","onSubmit","newId","useState","newData","setNewData","inputTitle","setInputTitle","appliedTitle","setAppliedTitle","applyQuerry","useCallback","f","delay","timeId","clearTimeout","args","setTimeout","debounce","useEffect","id","title","completed","className","event","preventDefault","type","placeholder","value","onChange","target","onKeyDown","key","Main","React","memo","data","changeCheckob","onDelete","onUpdateTitle","isCompleted","setCompleted","chhosenForEditing","setEdit","editValue","setEditValue","htmlFor","map","item","classnames","editing","onDoubleClick","checked","onClick","Footer","itemsLength","filterData","clearAllCompleted","useReducer","isActive","actions","dispatch","href","selected","App","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","setItem","stringify","useLocalStorage","setDataHooks","visibleData","setVisibleData","length","postId","newChecked","find","post","filter","newTitle","filterBy","undefined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b262b75.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Header = ({ onSubmit, newId }) => {\n  const [newData, setNewData] = useState({});\n  const [inputTitle, setInputTitle] = useState('');\n  const [appliedTitle, setAppliedTitle] = useState('');\n\n  const debounce = (f, delay) => {\n    let timeId;\n\n    return (...args) => {\n      clearTimeout(timeId);\n      timeId = setTimeout(f, delay, ...args);\n    };\n  };\n\n  const applyQuerry = useCallback(debounce(setAppliedTitle, 100), []);\n\n  useEffect(() => {\n    setNewData({\n      id: newId,\n      title: inputTitle,\n      completed: false,\n    });\n  }, [appliedTitle]);\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n\n          onSubmit(newData);\n        }}\n      >\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={inputTitle}\n          onChange={(event) => {\n            setInputTitle(event.target.value);\n            applyQuerry(event.target.value);\n          }}\n\n          onKeyDown={(event) => {\n            if (event.key === 'Enter') {\n              setInputTitle('');\n            }\n          }}\n        />\n      </form>\n    </header>\n  );\n};\n\nHeader.propTypes = PropTypes.shape({\n  onSubmit: PropTypes.func.isRequired,\n  newId: PropTypes.number.isRequired,\n}).isRequired;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport const Main = React.memo(\n  ({ data, changeCheckob, onDelete, onUpdateTitle }) => {\n    const [isCompleted, setCompleted] = useState(false);\n    const [chhosenForEditing, setEdit] = useState(0);\n    const [editValue, setEditValue] = useState('');\n\n    return (\n      <section className=\"main\">\n        <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <ul className=\"todo-list\">\n\n          {data.map(item => (\n\n            <li\n              className={classnames('',\n                { completed: item.completed },\n                { editing: chhosenForEditing === item.id })}\n              key={item.id}\n              onDoubleClick={() => {\n                setEdit(item.id);\n                setEditValue(item.title);\n              }}\n            >\n              <div className=\"view\">\n                <input\n                  type=\"checkbox\"\n                  className=\"toggle\"\n                  checked={item.completed}\n                  onClick={() => {\n                    setCompleted(!isCompleted);\n                    changeCheckob(item.id, isCompleted);\n                  }}\n                />\n                <label>{item.title}</label>\n                <button\n                  type=\"button\"\n                  className=\"destroy\"\n                  onClick={() => {\n                    onDelete(item.id);\n                  }}\n                />\n              </div>\n\n              <input\n                type=\"text\"\n                className=\"edit\"\n                value={editValue}\n                onChange={(event) => {\n                  setEditValue(event.target.value);\n                }}\n                onKeyDown={(event) => {\n                  if (event.key === 'Enter') {\n                    onUpdateTitle(chhosenForEditing, event.target.value);\n                    setEdit(null);\n                  }\n\n                  if (event.key === 'Escape') {\n                    setEdit(null);\n                  }\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n      </section>\n    );\n  },\n);\n\nMain.propTypes = PropTypes.shape({\n  data: PropTypes.arrayOf({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }),\n  changeCheckob: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onUpdateTitle: PropTypes.func.isRequired,\n}).isRequired;\n","import React, { useReducer } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Footer = React.memo(\n  ({ itemsLength, filterData, clearAllCompleted }) => {\n    const reducer = (isActive, actions) => {\n      switch (actions) {\n        case 'all':\n          return 'all';\n\n        case 'active':\n          return 'active';\n\n        case 'completed':\n          return 'completed';\n\n        default:\n          return '';\n      }\n    };\n\n    const [isActive, dispatch] = useReducer(reducer, '');\n\n    const selectAll = () => {\n      dispatch('all');\n      filterData();\n    };\n\n    const selectActive = () => {\n      dispatch('active');\n      filterData(false);\n    };\n\n    const selectComplited = () => {\n      dispatch('completed');\n      filterData(true);\n    };\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${itemsLength} items left`}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              onClick={selectAll}\n              className={classnames({ selected: isActive === 'all' })}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              onClick={selectActive}\n              className={classnames({ selected: isActive === 'active' })}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              onClick={selectComplited}\n              className={classnames({ selected: isActive === 'completed' })}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => {\n            clearAllCompleted();\n          }}\n        >\n          Clear completed\n        </button>\n      </footer>\n    );\n  },\n);\n\nFooter.propTypes = PropTypes.shape({\n  filterData: PropTypes.func.isRequired,\n  itemsLength: PropTypes.number.isRequired,\n  clearAllCompleted: PropTypes.func.isRequired,\n}).isRequired;\n","import React, { useEffect, useState } from 'react';\nimport { Header } from './components/Header';\nimport { Main } from './components/Main';\nimport { Footer } from './components/Footer';\nimport { useLocalStorage } from './hooks/hooks';\n\nexport function App() {\n  const [data, setDataHooks] = useLocalStorage('todos', []);\n  const [visibleData, setVisibleData] = useState([]);\n\n  useEffect(() => {\n    setVisibleData(data);\n  }, []);\n\n  useEffect(() => {\n    setVisibleData(data);\n  }, [data]);\n\n  const updateData = (newData) => {\n    setDataHooks([...data, newData]);\n  };\n\n  const updateTitle = (postId, newTitle) => {\n    const findPost = visibleData.find(post => post.id === postId);\n\n    findPost.title = newTitle;\n  };\n\n  const deletePost = (postId) => {\n    setDataHooks(data.filter(post => post.id !== postId));\n  };\n\n  const changeCheckox = (postId, newChecked) => {\n    const updatedPost = visibleData.find(post => post.id === postId);\n\n    updatedPost.completed = newChecked;\n  };\n\n  const filterData = (filterBy) => {\n    if (filterBy === undefined) {\n      setVisibleData(data);\n    } else {\n      setVisibleData(data\n        .filter(post => post.completed === filterBy));\n    }\n  };\n\n  const clearAllCompleted = () => {\n    setDataHooks(data.filter(post => post.completed !== true));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <Header\n        onSubmit={updateData}\n        newId={data.length + 1}\n      />\n\n      <Main\n        data={visibleData}\n        changeCheckob={changeCheckox}\n        onDelete={deletePost}\n        onUpdateTitle={updateTitle}\n      />\n\n      {visibleData.length > 0 && (\n        <Footer\n          filterData={filterData}\n          itemsLength={visibleData.length}\n          clearAllCompleted={clearAllCompleted}\n        />\n      )}\n    </section>\n  );\n}\n","import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = (key, defaultValue) => {\n  const [state, setState] = useState(\n    () => JSON.parse(window.localStorage.getItem(key)) ?? defaultValue,\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state, key]);\n\n  return [state, setState];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}